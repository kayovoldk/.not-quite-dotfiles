# Fix the git_prompt_info output for oh-my-zsh.
ZSH_THEME_GIT_PROMPT_PREFIX="on %{$fg[cyan]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_UNTRACKED="%{$fg[cyan]%}"

ZSH_THEME_GIT_PROMPT_AHEAD="%{$reset_color%}⇡"
ZSH_THEME_GIT_PROMPT_BEHIND="%{$reset_color%}⇣"

# set colours if you have text here. i have emoji because obviously.
#ZSH_THEME_GIT_PROMPT_DIRTY=""
#ZSH_THEME_GIT_PROMPT_CLEAN=""

#do i need this?
#setopt PROMPT_SUBST

#keybinds
bindkey "^[^[[C" forward-word
bindkey "^[^[[D" backward-word

# Fastest possible way to check if repo is dirty. Thanks btford for anything that looks magical in here. Manually merged some changes back to original
git_dirty() {
	# check if we're in a git repo
	command git rev-parse --is-inside-work-tree &>/dev/null || return
	# check if it's dirty
	# using these emoji make multi line commands be broken and appear on one line. shrug.
    command git diff --quiet --ignore-submodules HEAD &>/dev/null; [ $? -eq 1 ] && echo '☔️' || echo '☀️'
    #command git diff --quiet --ignore-submodules HEAD &>/dev/null; [ $? -eq 1 ] && echo '⛈' || echo '🌞'
}

# If it's a git repo, add the git prompt  >>TODO figure out if i need this function
git_prompt_go() {
  # removed chromium stuff dont think i need it
    command git rev-parse --is-inside-work-tree &>/dev/null || return
    echo ' ' on $(git_current_branch) $(git_prompt_ahead)$(git_prompt_behind)`git_dirty`$(parse_git_stash)' '
}

# Are there stashes?
function parse_git_stash {
  [[ $(git stash list 2> /dev/null | tail -n1) != "" ]] && echo '☣'
}


# Displays the exec time of the last command if set threshold was exceeded
cmd_exec_time() {
  local stop=`python -c 'import time;print int(round(time.time()*1000));'`
  local start=${cmd_timestamp:-$stop}
  let elapsed=$stop-$start
}


# For my own and others sanity
# git:
# %b => current branch
# %a => current action (rebase/merge)
# prompt:
# %F => color dict
# %f => reset color
# %~ => current path
# %c => trail of %~
# %* => time
# %n => username
# %m => shortname host
# %(?..) => prompt conditional - %(condition.true.false)

read -d '' SILLY_BIT << EOF
(´ ▽｀).。ｏ♡
EOF

battery_status() {
  ~/.not-quite-dotfiles/bin/battery-status
}

# This prompt works in oh-my-zsh because of git_prompt_info magic. See below for regular zsh.

PROMPT='$(battery_status) %F{red}$(echo "$SILLY_BIT ")%F{green}%~%F{blue}`git_prompt_go`%f%F{red} ❥ %f'


